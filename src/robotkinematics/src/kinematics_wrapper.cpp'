// ROS includes
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "servo_control/MotorVector.h"
#include "geometry_msgs/PoseStamped.h"
#include "Robot_Control.h"
// C++ includes
using namespace Codegen;
#include <sstream>
void quat2eul(double quat[4], double eul[3]) {

}
void servoCallback(const servo_control::MotorVector& msg) {
  ROS_INFO("I heard: a thingy");
}
double r_II_B_d[3];
double Euler_d[3];
double gamma_m[36];
bool init_toggle = 1;
double theta1_d_out[4];
double theta2_d_out[4];
double theta3_d_out[4];
double * phi_d_temp_out;
double r_II_B_d_temp_out[3];
unsigned char floor_toggle_out[4];
unsigned char legs_valid_out[4];
bool target_set = 0;
void setTargetPosCallback(const geometry_msgs::PoseStamped& msg) {
  target_set = 1;
  r_II_B_d[0]=msg.pose.position.x;
  r_II_B_d[1]=msg.pose.position.y;
  r_II_B_d[2]=msg.pose.position.z;
  Euler_d[0]=0;
  Euler_d[1]=0;
  Euler_d[2]=0;
  for(int i = 0; i<36; i++) {
    gamma_m[i]=0;
  }
}
int main(int argc, char **argv) {
  ros::init(argc,argv,"robot_kinematics");

  ros::NodeHandle n;
  ros::Publisher target_pub = n.advertise<servo_control::MotorVector>("kinematics_target",1000);
  ros::Rate loop_rate(10);
  ros::Subscriber sub=n.subscribe("kinematics_feedback",1000,servoCallback);
  ros::Subscriber targetPos_sub=n.subscribe("rtabmap/goal_set",1000,setTargetPosCallback);
  int cnt=0;
  while(ros::ok()) {
    servo_control::MotorVector msg;
    if(target_set==1) {
      Robot_Control(r_II_B_d, Euler_d,gamma_m,init_toggle,theta1_d_out,theta2_d_out,theta3_d_out,
                    phi_d_temp_out, r_II_B_d_temp_out, floor_toggle_out,legs_valid_out);
      init_toggle=0;
      for(int i =0; i<4;i++) msg.data[i]=theta1_d_out[i];
      for(int i =4; i<8;i++) msg.data[i]=theta2_d_out[i];
      for(int i =8; i<12;i++) msg.data[i]=theta3_d_out[i];
      target_pub.publish(msg);
      ros::spinOnce();
      loop_rate.sleep();
      ++cnt;
    }
  }
  return 0;
}
